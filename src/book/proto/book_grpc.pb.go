// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package book_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*Book, error)
	GetBooksByAuthor(ctx context.Context, in *GetBookByAuthor, opts ...grpc.CallOption) (BookService_GetBooksByAuthorClient, error)
	GetBooks(ctx context.Context, opts ...grpc.CallOption) (BookService_GetBooksClient, error)
	Update(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*Book, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/book_service.BookService/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBooksByAuthor(ctx context.Context, in *GetBookByAuthor, opts ...grpc.CallOption) (BookService_GetBooksByAuthorClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[0], "/book_service.BookService/GetBooksByAuthor", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceGetBooksByAuthorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookService_GetBooksByAuthorClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type bookServiceGetBooksByAuthorClient struct {
	grpc.ClientStream
}

func (x *bookServiceGetBooksByAuthorClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookServiceClient) GetBooks(ctx context.Context, opts ...grpc.CallOption) (BookService_GetBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[1], "/book_service.BookService/GetBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceGetBooksClient{stream}
	return x, nil
}

type BookService_GetBooksClient interface {
	Send(*GetBookRequest) error
	Recv() (*Book, error)
	grpc.ClientStream
}

type bookServiceGetBooksClient struct {
	grpc.ClientStream
}

func (x *bookServiceGetBooksClient) Send(m *GetBookRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bookServiceGetBooksClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookServiceClient) Update(ctx context.Context, in *UpdateBookRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/book_service.BookService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	GetBook(context.Context, *GetBookRequest) (*Book, error)
	GetBooksByAuthor(*GetBookByAuthor, BookService_GetBooksByAuthorServer) error
	GetBooks(BookService_GetBooksServer) error
	Update(context.Context, *UpdateBookRequest) (*Book, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) GetBook(context.Context, *GetBookRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServiceServer) GetBooksByAuthor(*GetBookByAuthor, BookService_GetBooksByAuthorServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedBookServiceServer) GetBooks(BookService_GetBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookServiceServer) Update(context.Context, *UpdateBookRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_service.BookService/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBooksByAuthor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBookByAuthor)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).GetBooksByAuthor(m, &bookServiceGetBooksByAuthorServer{stream})
}

type BookService_GetBooksByAuthorServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type bookServiceGetBooksByAuthorServer struct {
	grpc.ServerStream
}

func (x *bookServiceGetBooksByAuthorServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _BookService_GetBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServiceServer).GetBooks(&bookServiceGetBooksServer{stream})
}

type BookService_GetBooksServer interface {
	Send(*Book) error
	Recv() (*GetBookRequest, error)
	grpc.ServerStream
}

type bookServiceGetBooksServer struct {
	grpc.ServerStream
}

func (x *bookServiceGetBooksServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bookServiceGetBooksServer) Recv() (*GetBookRequest, error) {
	m := new(GetBookRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BookService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book_service.BookService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).Update(ctx, req.(*UpdateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book_service.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBook",
			Handler:    _BookService_GetBook_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BookService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBooksByAuthor",
			Handler:       _BookService_GetBooksByAuthor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBooks",
			Handler:       _BookService_GetBooks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "book.proto",
}
